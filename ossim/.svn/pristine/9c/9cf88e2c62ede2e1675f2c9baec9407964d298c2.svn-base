//----------------------------------------------------------------------------
// License:  LGPL
// 
// See LICENSE.txt file in the top level directory for more details.
//
// Author:  David Burken
//
// Description:
//
// Piecewise remapper class definition. Derived from ossimTableRemapper.
// 
//----------------------------------------------------------------------------
// $Id$

#include <ossim/imaging/ossimPiecewiseRemapper.h>
#include <ossim/imaging/ossimImageDataFactory.h>
#include <ossim/base/ossimException.h>
#include <ossim/base/ossimKeywordNames.h>
#include <ossim/base/ossimNotifyContext.h>
#include <ossim/base/ossimScalarTypeLut.h>
#include <ossim/base/ossimTrace.h>
#include <ossim/imaging/ossimImageData.h>
#include <iomanip>
#include <iostream>
#include <sstream>

RTTI_DEF1(ossimPiecewiseRemapper, "ossimPiecewiseRemapper", ossimImageSourceFilter)


static const std::string REMAP_KW      = "remap";
static const std::string REMAP_TYPE_KW = "remap_type";

static ossimTrace traceDebug("ossimPiecewiseRemapper:debug");

#ifdef OSSIM_ID_ENABLED
static const char OSSIM_ID[] = "$Id$";
#endif

// Private container class for points.
ossimPiecewiseRemapper::ossimRemapSet::ossimRemapSet()
   :
   m_set(0)
{
}

ossimPiecewiseRemapper::ossimRemapSet::ossimRemapSet(const ossimRemapSet& obj)
   :
   m_set(obj.m_set)
{
}

const ossimPiecewiseRemapper::ossimRemapSet&
ossimPiecewiseRemapper::ossimRemapSet::operator=( const ossimRemapSet& rhs )
{
   if ( this != &rhs )
   {
      m_set = rhs.m_set;
   }
   return *this;
}

ossimPiecewiseRemapper::ossimPiecewiseRemapper()
   :
   ossimImageSourceFilter(),  // base class
   m_tile(0),
   m_inputScalarType(OSSIM_SCALAR_UNKNOWN),
   m_outputScalarType(OSSIM_SCALAR_UNKNOWN),
   m_remapType(ossimPiecewiseRemapper::UNKNOWN),
   m_remapSet(0),
   m_min(0),
   m_max(0)
{
   if (traceDebug())
   {
      ossimNotify(ossimNotifyLevel_DEBUG)
         << "ossimPiecewiseRemapper::ossimPiecewiseRemapper entered...\n";
#ifdef OSSIM_ID_ENABLED
      ossimNotify(ossimNotifyLevel_DEBUG)
         << "OSSIM_ID:  " << OSSIM_ID << "\n";
#endif      
   }
}

ossimPiecewiseRemapper::~ossimPiecewiseRemapper()
{
}

void ossimPiecewiseRemapper::initialize()
{
   if (traceDebug())
   {
      ossimNotify(ossimNotifyLevel_DEBUG)
         << "ossimPiecewiseRemapper::initialize entered..." << endl;
   }

   //---
   // Call the base class initialize.
   // Note:  This will reset "theInputConnection" if it changed...
   //---
   ossimImageSourceFilter::initialize();

   m_tile = 0;
   
   if ( theInputConnection )
   {
      m_inputScalarType = theInputConnection->getOutputScalarType();
      
      // Since we override "getOutputScalarType" make sure something's set.
      if (m_outputScalarType == OSSIM_SCALAR_UNKNOWN)
      {
         m_outputScalarType = theInputConnection->getOutputScalarType();
      }
   }
   
   if (traceDebug())
   {
      ossimNotify(ossimNotifyLevel_DEBUG)
         << "ossimPiecewiseRemapper::initialize exited..." << endl;
   }
}

void ossimPiecewiseRemapper::setRemapType( const std::string& type )
{
   if ( (type == "linear_native") ||
        (ossimString(type).downcase() == "linear_native") )
   {
      m_remapType = ossimPiecewiseRemapper::LINEAR_NATIVE;
   }
   else
   {
      m_remapType = ossimPiecewiseRemapper::UNKNOWN;
   }
}

ossimRefPtr<ossimImageData> ossimPiecewiseRemapper::getTile(
   const ossimIrect& tileRect,
   ossim_uint32 resLevel)
{
   ossimRefPtr<ossimImageData> result = 0;

   if ( theInputConnection )
   {
      if ( theEnableFlag )
      {
         if ( m_tile.valid() == false )
         {
            allocate( tileRect );
         }

         m_tile->setImageRectangle( tileRect );

         ossimRefPtr<ossimImageData> inputTile = theInputConnection->getTile( tileRect, resLevel );
         
         if ( !inputTile.valid() ||
              ( inputTile->getDataObjectStatus() == OSSIM_EMPTY ) ||
              ( inputTile->getDataObjectStatus() == OSSIM_NULL) )
         {
            m_tile->makeBlank();
         }
         else
         {
            if ( m_remapSet.size() == m_tile->getNumberOfBands() )
            {
               if ( inputTile->getDataObjectStatus() == OSSIM_PARTIAL )
               {
                  m_tile->makeBlank();
               }
               
               fillTile( inputTile.get(), m_tile.get() );
            }
            else
            {
               m_tile->loadTile( inputTile.get() );
            }
            m_tile->validate();
         }
         result = m_tile;
      }
      else
      {
         // Fetch tile from pointer from the input source.
         result = theInputConnection->getTile( tileRect, resLevel );
      }
   }

   return result;
}

void ossimPiecewiseRemapper::allocate( const ossimIrect& rect )
{
   m_tile = ossimImageDataFactory::instance()->create(this,
                                                      getOutputScalarType(),
                                                      getNumberOfOutputBands(),
                                                      rect.width(),
                                                      rect.height());
   m_tile->initialize();
}

void ossimPiecewiseRemapper::fillTile( const ossimImageData* inTile,
                                       ossimImageData* outTile ) const
{
   switch ( inTile->getScalarType() )
   {
      case OSSIM_UINT8:
      {
         fillTile( ossim_uint8(0), inTile, outTile );
         break;
      }  
      case OSSIM_SINT8:
      {
         fillTile(ossim_sint8(0), inTile, outTile );
         break;
      }  
      case OSSIM_UINT16:
      case OSSIM_USHORT11:
      {
         fillTile(ossim_uint16(0), inTile, outTile );
         break;
      }  
      case OSSIM_SINT16:
      {
         fillTile(ossim_sint16(0), inTile, outTile );
         break;
      }  
      case OSSIM_UINT32:
      {
         fillTile(ossim_uint32(0), inTile, outTile );
         break;
      }
      case OSSIM_SINT32:
      {
         fillTile(ossim_sint32(0), inTile, outTile );
         break;
      }        case OSSIM_FLOAT32:
      case OSSIM_NORMALIZED_FLOAT:
      {
         fillTile(ossim_float32(0.0), inTile, outTile );
         break;
      }  
      case OSSIM_NORMALIZED_DOUBLE:
      case OSSIM_FLOAT64:
      {
         fillTile(ossim_float64(0.0), inTile, outTile );
         break;
      }  
      case OSSIM_SCALAR_UNKNOWN:
      default:
      {
         outTile->makeBlank();
         break;
      }
   }
}

template<class inType>
void ossimPiecewiseRemapper::fillTile( inType inDummy,
                                       const ossimImageData* inTile,
                                       ossimImageData* outTile ) const
{
   switch ( outTile->getScalarType() )
   {
      case OSSIM_UINT8:
      {
         fillTile( inDummy, ossim_uint8(0), inTile, outTile );
         break;
      }  
      case OSSIM_SINT8:
      {
         fillTile( inDummy, ossim_sint8(0), inTile, outTile );
         break;
      }  
      case OSSIM_UINT16:
      case OSSIM_USHORT11:
      {
         fillTile( inDummy, ossim_uint16(0), inTile, outTile );
         break;
      }  
      case OSSIM_SINT16:
      {
         fillTile( inDummy, ossim_sint16(0), inTile, outTile );
         break;
      }  
      case OSSIM_UINT32:
      {
         fillTile( inDummy, ossim_uint32(0), inTile, outTile );
         break;
      }
      case OSSIM_SINT32:
      {
         fillTile( inDummy, ossim_sint32(0), inTile, outTile );
         break;
      }
      case OSSIM_FLOAT32:
      case OSSIM_NORMALIZED_FLOAT:
      {
         fillTile( inDummy, ossim_float32(0.0), inTile, outTile );
         break;
      }  
      case OSSIM_NORMALIZED_DOUBLE:
      case OSSIM_FLOAT64:
      {
         fillTile(inDummy, ossim_float64(0.0), inTile, outTile );
         break;
      }  
      case OSSIM_SCALAR_UNKNOWN:
      default:
      {
         outTile->makeBlank();
         break;
      }
   }
}
   
template<class inType, class outType>
void ossimPiecewiseRemapper::fillTile( inType /* inDummy */,
                                       outType /* outDummy */,
                                       const ossimImageData* inTile,
                                       ossimImageData* outTile ) const
{
   const ossim_uint32 BANDS = outTile->getNumberOfBands();
   const ossim_uint32 SPB   = outTile->getSizePerBand();

   for(ossim_uint32 band = 0; band < BANDS; ++band)
   {
      // Null values:
      const ossim_float64 IN_NP  = inTile->getNullPix(band);
      const ossim_float64 OUT_NP = outTile->getNullPix(band);
      
      const inType* inBandBuf = static_cast<const inType*>( inTile->getBuf(band) );
      outType* outBandBuf     = static_cast<outType*>( outTile->getBuf(band) );
      ossim_float64 p = 0;

      //---
      // Each remap set holds a group of tuples for the band.
      // Tuple format example: <min_in> <max_in> <min_out> <max_out>
      //---
      const ossim_uint32  TUPLES = m_remapSet[band].m_set.size() / 4;
      
      for ( ossim_uint32 i = 0; i < SPB; ++i )
      {
         p = inBandBuf[i];
         if ( p == IN_NP )
         {
            p = OUT_NP;
         }
         else
         {
            for ( ossim_uint32 set = 0; set < TUPLES; ++set )
            {
               if ( ( p >= m_remapSet[band].m_set[set*4] ) && // input min
                    ( p <= m_remapSet[band].m_set[set*4+1] ) ) 
               {
                  // p = (p - output_min) * (output_max-output_min)/(input_max-input_min) + output_min;
                  p = (p - m_remapSet[band].m_set[set*4]) *
                     (m_remapSet[band].m_set[set*4+3]-m_remapSet[band].m_set[set*4+2]) /
                     (m_remapSet[band].m_set[set*4+1]-m_remapSet[band].m_set[set*4]) +
                     m_remapSet[band].m_set[set*4];
                  
                  outBandBuf[i] =
                     (outType)( ( p >= m_min[band] ) ?
                                ( ( p <= m_max[band] ) ? p : m_max[band] )
                                : m_min[band]);
                  
                  // Get out of loop through touples if pixel set.
                  break;
               }
            }
         }
      }
   }
   
} // End: :fillTill( inType /* inDummy */, outType /* outDummy */, ...

ossimScalarType ossimPiecewiseRemapper::getOutputScalarType() const
{
   return m_outputScalarType;
}

void ossimPiecewiseRemapper::getRemapTypeString(
   ossimPiecewiseRemapper::PiecewiseRemapType remapType, std::string& s ) const
{
   if ( remapType == ossimPiecewiseRemapper::LINEAR_NATIVE )
   {
      s = "linear_native";
   }
   else
   {
      s = "unknown";
   }
}

bool ossimPiecewiseRemapper::loadState(const ossimKeywordlist& kwl,
                                       const char* prefix)
{
   static const char MODULE[] = "ossimPiecewiseRemapper::loadState";
   if (traceDebug())
   {
      ossimNotify(ossimNotifyLevel_DEBUG)
         << MODULE << " Entered..." << "\nprefix:  " << (prefix?prefix:"null") << endl;
   }

   bool status = false;
   std::string p = ( prefix ? prefix : "" );

   // Check type first before going on:
   std::string key = ossimKeywordNames::TYPE_KW;
   std::string value;
   value = kwl.findKey( p, key );

   if ( value == "ossimPiecewiseRemapper" )
   {
      // Load the base class states...
      status = ossimImageSourceFilter::loadState(kwl, prefix);
      
      if (status)
      {
         // Look for scalar type keyword.
         ossim_int32 st = ossimScalarTypeLut::instance()->getEntryNumber(kwl, p.c_str(), true);

         // Lookup table returns -1 if not found so check return...
         if ( (st != -1) && (st != OSSIM_SCALAR_UNKNOWN) )
         {
            m_outputScalarType = static_cast<ossimScalarType>(st);
         }
         
         // Remap type "remap_type":
         value = kwl.findKey( p, REMAP_TYPE_KW );
         if ( value.size() )
         {
            setRemapType( value );
            
            if ( m_remapType != ossimPiecewiseRemapper::UNKNOWN )
            {
               // Get the number of bands "number_bands":
               ossim_uint32 bands = 0;
               key = ossimKeywordNames::NUMBER_BANDS_KW;
               value = kwl.findKey( p, key );
               if ( value.size() )
               {
                  bands = ossimString(value).toUInt32();
               }
               
               if ( bands )
               {
                  // Start with clean remap set:
                  m_remapSet.clear();
                  m_min.clear();
                  m_max.clear();
                  
                  for ( ossim_uint32 band = 0; band < bands; ++band )
                  {
                     // Remap set "remap.band0":
                     std::string keyBase = REMAP_KW;
                     keyBase += ".band";
                     key = keyBase + ossimString::toString(band).string();
                     value = kwl.findKey( p, key );
                     if ( value.size() )
                     {
                        ossimPiecewiseRemapper::ossimRemapSet set;
                        if ( initRemapSetFromString( value, set ) )
                        {
                           m_remapSet.push_back( set );
                        }
                     }
                     
                     // Min:
                     keyBase = ossimKeywordNames::MIN_VALUE_KW;
                     keyBase += ".band";
                     key = keyBase + ossimString::toString(band).string();
                     value =  kwl.findKey( p, key );
                     if ( value.size() )
                     {
                        m_min.push_back( ossimString(value).toFloat64() );
                     }
                     
                     // Max:
                     keyBase = ossimKeywordNames::MAX_VALUE_KW;
                     keyBase += ".band";
                     key = keyBase + ossimString::toString(band).string();
                     value =  kwl.findKey( p, key );
                     if ( value.size() )
                     {
                        m_max.push_back( ossimString(value).toFloat64() );
                     }
                     
                  } // End: Band loop

                  if ( m_remapSet.size() && ( !m_min.size() || !m_max.size() ) )
                  {
                     initMinMax(); // Initialize from the m_reampSet tuples.
                  }
               }
            }
         }
         
      } // Matches: status = ossimImageSourceFilter::loadState(kwl, prefix); if (status){...
      else
      {
         // Sets base: ossimSource::theEnableFlag
         setEnableFlag(false);
      }


      // Tmp drb:
      // initMinMax();
      
   } // Matches: if ( value == "ossimPiecewiseRemapper" )

   if (traceDebug())
   {
      ossimNotify(ossimNotifyLevel_DEBUG) << MODULE << " DEBUG:\n";
      this->print( ossimNotify(ossimNotifyLevel_DEBUG) );
      ossimNotify(ossimNotifyLevel_DEBUG) << "\nExited..." << endl;
   }
   return status;
   
} // End: ossimPiecewiseRemapper::loadState

bool ossimPiecewiseRemapper::saveState( ossimKeywordlist& kwl,
                                        const char* prefix) const
{
   bool result = false;
   
   const ossim_uint32 BANDS = getNumberOfOutputBands();
   
   if ( ( m_remapType != ossimPiecewiseRemapper::UNKNOWN ) &&
        ( m_remapSet.size() == BANDS ) )
   {
      std::string p = ( prefix ? prefix : "" );

      // Scalar:
      kwl.add(p.c_str(),
              ossimKeywordNames::SCALAR_TYPE_KW,
              ossimScalarTypeLut::instance()->
              getEntryString( m_outputScalarType ).c_str(),
              true);

      // Bands:
      std::string value = ossimString::toString(BANDS).string();
      kwl.addPair( p, std::string(ossimKeywordNames::NUMBER_BANDS_KW), value );
      
      // Remap type:
      getRemapTypeString( m_remapType, value );
      kwl.addPair( p, REMAP_TYPE_KW, value );
      
      // Remap set:
      std::string keyBase = REMAP_KW;
      keyBase += ".band";
      ossim_uint32 band = 0;
      for ( band = 0; band < BANDS; ++band )
      {
         std::string key = keyBase + ossimString::toString(band).string();
         getRemapSetString( m_remapType, m_remapSet[band], value );
         kwl.addPair( p, key, value );
      }

      // Min/max values:
      if ( ( m_min.size() == BANDS ) && ( m_max.size() == BANDS ) )
      {
         std::string minBase = ossimKeywordNames::MIN_VALUE_KW;
         minBase += ".band";
         std::string maxBase = ossimKeywordNames::MAX_VALUE_KW;
         maxBase += ".band";
         
         for ( band = 0; band < BANDS; ++band )
         {
            // Min:
            std::string key = minBase + ossimString::toString(band).string();
            kwl.add( p.c_str(), key.c_str(), m_min[band] );

            // Max:
            key = maxBase + ossimString::toString(band).string();
            kwl.add( p.c_str(), key.c_str(), m_max[band] );
         }
      }

      // Base class:
      result = ossimImageSourceFilter::saveState(kwl, prefix);
   }
   
   return result;
}

void ossimPiecewiseRemapper::getRemapSetString(
   ossimPiecewiseRemapper::PiecewiseRemapType remapType,
   const ossimPiecewiseRemapper::ossimRemapSet& set, 
   std::string& s ) const
{
   if ( remapType == ossimPiecewiseRemapper::LINEAR_NATIVE )
   {
      getLinearRemapSetString( set, s );
   }
}

void ossimPiecewiseRemapper::getLinearRemapSetString(
   const ossimPiecewiseRemapper::ossimRemapSet& set, 
   std::string& s ) const
{
   //---
   // Save in the form of:
   // ((0, 0.5, 0.0, 0.5),(0.5,1.0,0.5,1.5))
   //---
   s.clear();
   if ( set.m_set.size() )
   {
      const ossim_uint32 TUPLES = set.m_set.size() / 4;
      if ( TUPLES )
      {  
         std::ostringstream os;
         os << std::setprecision(15)
            << "(";
         for ( ossim_uint32 i = 0; i < TUPLES; ++i )
         {
            ossim_uint32 setIdx = i*4;
            os << "("
               << set.m_set[ setIdx ]
               << ","
               << set.m_set[ setIdx + 1 ]
               << ","
               << set.m_set[ setIdx + 2 ]
               << ","
               << set.m_set[ setIdx + 3 ]
               << ")";
            if ( i < (TUPLES-1) )
            {
               os << ","; // Comma between quadruples.
            }
         }
         os << ")";
         s = os.str();
      }
   }
   
} // End: ossimPiecewiseRemapper::getLinearRemapSetString( ... )

bool ossimPiecewiseRemapper::initRemapSetFromString(
   const std::string& s, ossimPiecewiseRemapper::ossimRemapSet& set ) const
{
   //---
   // Example:
   // ((0, 0.5, 0.0, 0.5),(0.5,1.0,0.5,1.5))
   //---

   bool result = false;

   if ( s.size() )
   {
      std::istringstream in( s );
      char c;
      ossim_float64 d;
      
      // Gobble the open '('
      while ( !in.bad() && !in.eof() )
      {
         c = in.get();
         if ( c == '(' ) break;
      }
      
      // Main loop:
      while( !in.bad() && !in.eof() )
      {
         c = in.get();
         
         if ( c == ')' ) // Possible end of quadruple...
         {
            // Gobble next comma:
            while( !in.bad() && !in.eof() )
            {
               c = in.get();
               if ( c == ',' )
               {
                  break;
               }
            }
            c = in.get();
         }
         
         if ( (c == '(') || (c == ',') )
         {
            // Next string should be a number:
            in >> d;
            if ( in.good() )
            {
               set.m_set.push_back(d);
            }
            else
            {
               break;
            }
         }
      }

      if ( set.m_set.size() )
      {
         result = true;
      }
   }

   if ( !result )
   {
      set.m_set.clear();
   }

   return result;
   
} // End: ossimPiecewiseRemapper::initRemapSetFromString( ... )

ostream& ossimPiecewiseRemapper::print(ostream& os) const
{
   ossimKeywordlist kwl;
   saveState( kwl, 0 );
   
   os << setiosflags(ios::fixed) << setprecision(15)
      << "\nossimPiecewiseRemapper::print:\n"
      << kwl
      << "\n";
   
   return os;
}

ossimString ossimPiecewiseRemapper::getClassName() const
{
   return ossimString("ossimPiecewiseRemapper");
}

ossimString ossimPiecewiseRemapper::getLongName()const
{
   return ossimString("OSSIM Piecewise Remapper");
}

ossimString ossimPiecewiseRemapper::getShortName()const
{
   return ossimString("Piecewise Remapper");
}

double ossimPiecewiseRemapper::getMinPixelValue(ossim_uint32 band)const
{
   ossim_float64 result = ossimImageSourceFilter::getMinPixelValue(band);
   if ( theEnableFlag && (band < m_min.size()) )
   {
      result = m_min[band];
   }
   return result;
}

ossim_float64 ossimPiecewiseRemapper::getMaxPixelValue(ossim_uint32 band) const
{
   ossim_float64 result = ossimImageSourceFilter::getMaxPixelValue(band);
   if ( theEnableFlag && (band < m_max.size()) )
   {
      result = m_max[band];
   }
   return result;
}

void ossimPiecewiseRemapper::initMinMax()
{
   if ( m_remapType == ossimPiecewiseRemapper::LINEAR_NATIVE )
   {
      //---
      // Each remap set holds a group of tuples for the band.
      // Tuple format example: <min_in> <max_in> <min_out> <max_out>
      //---
      const ossim_uint32 BANDS = getNumberOfOutputBands();

      if ( m_remapSet.size() == BANDS )
      {
         m_min.resize( BANDS );
         m_max.resize( BANDS );
         
         // First time through:
         for( ossim_uint32 band = 0; band < BANDS; ++band )
         {
            const ossim_uint32 TUPLES = m_remapSet[band].m_set.size() / 4;
            for ( ossim_uint32 tuple = 0; tuple < TUPLES; ++tuple )
            {
               //---
               // Min: get min of "min_out" from sets.
               // Max: get max of "max_out" from sets.
               //---
               if ( tuple == 0 )
               {
                  m_min[band] = m_remapSet[band].m_set[tuple*4+2];
                  m_max[band] = m_remapSet[band].m_set[tuple*4+3];
               }
               else
               {
                  if ( m_remapSet[band].m_set[tuple*4+2] < m_min[band] )
                  {
                     m_min[band] = m_remapSet[band].m_set[tuple*4+2];
                  }
                  if ( m_remapSet[band].m_set[tuple*4+3] > m_max[band] )
                  {
                     m_max[band] = m_remapSet[band].m_set[tuple*4+3];
                  }
               }  
            }

            //---
            // Clamp min to scalar min as this is used for getMinPixelValue.
            // This will keep a remap of:
            // ((0, 127, 0, 127), (128, 255, 128, 382))
            // From having a min and null of 0...
            //---
            if ( m_outputScalarType != OSSIM_SCALAR_UNKNOWN )
            {
               if ( m_min[band] < ossim::defaultMin( m_outputScalarType ) )
               {
                  m_min[band] = ossim::defaultMin( m_outputScalarType );
               }
            }
            
         } // End: band loop...
      }
   }
   else
   {
      m_min.clear();
      m_max.clear();
   }
   
} // End: ossimPiecewiseRemapper::initMinMax()

// Private to disallow use...
ossimPiecewiseRemapper::ossimPiecewiseRemapper(const ossimPiecewiseRemapper&)
{
}

// Private to disallow use...
ossimPiecewiseRemapper& ossimPiecewiseRemapper::operator=(const ossimPiecewiseRemapper&)
{
   return *this;
}


